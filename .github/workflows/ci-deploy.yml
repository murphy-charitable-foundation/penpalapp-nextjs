name: CI + Deploy (prebuilt)

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]

permissions:
  contents: read
  deployments: write
  pull-requests: write

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG:   ${{ secrets.VERCEL_ORG_ID }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install
        run: npm ci || npm install

      - name: Build
        run: npm run build

      - name: Vercel CLI
        run: npm i -g vercel@latest

      - name: Target
        id: t
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then echo "env=production" >> $GITHUB_OUTPUT; else echo "env=preview" >> $GITHUB_OUTPUT; fi

      - name: vercel pull
        run: |
          vercel pull --yes \
            --environment "${{ steps.t.outputs.env }}" \
            --token "${{ env.VERCEL_TOKEN }}" \
            --scope "${{ env.VERCEL_ORG }}"

      - name: vercel build (prebuilt)
        run: |
          vercel build \
            --token "${{ env.VERCEL_TOKEN }}" \
            --scope "${{ env.VERCEL_ORG }}"

      - name: Deploy prebuilt
        id: deploy
        run: |
          set -e
          if [ "${{ steps.t.outputs.env }}" = "production" ]; then
            OUT="$(vercel deploy --prebuilt --prod --yes --token "${{ env.VERCEL_TOKEN }}" --scope "${{ env.VERCEL_ORG }}")"
          else
            OUT="$(vercel deploy --prebuilt --yes --token "${{ env.VERCEL_TOKEN }}" --scope "${{ env.VERCEL_ORG }}")"
          fi
          URL="$(printf "%s\n" "$OUT" | grep -Eo 'https://[a-zA-Z0-9.-]+\.vercel\.app' | tail -1 || true)"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "URL: ${URL:-none}"

      - name: Sanity check URL (fail on 401/protected)
        if: ${{ steps.deploy.outputs.url != '' }}
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.url }}")
          echo "HTTP $code for ${{ steps.deploy.outputs.url }}"
          if [ "$code" = "401" ] || [ "$code" = "403" ]; then
            echo "Deployment URL requires login (protected). Check Vercel preview protection/settings." >&2
            exit 1
          fi

      - name: Comment preview URL (PR only)
        if: ${{ github.event_name == 'pull_request' && steps.deploy.outputs.url != '' && steps.t.outputs.env == 'preview' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: `âœ… Preview: ${'{'}{ steps.deploy.outputs.url }{'}'}`
            })

      - name: GitHub Deployment card (main only)
        if: ${{ github.ref_name == 'main' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: dep } = await github.rest.repos.createDeployment({
              ...context.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            await github.rest.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: dep.id,
              state: 'success',
              environment: 'production'
            })