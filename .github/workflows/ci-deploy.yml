name: CI + Deploy (prebuilt)

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]

permissions:
  contents: read
  deployments: write

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG:   ${{ secrets.VERCEL_ORG_ID }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v4

      # Node (CLI runtime)
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Vercel CLI
      - name: Setup Vercel CLI
        run: npm i -g vercel@latest

      # Pull project config + envs (select preview/prod by branch)
      - name: Pull Vercel settings
        run: |
          vercel pull --yes \
            --environment="$([ '${{ github.ref_name }}' = 'main' ] && echo production || echo preview)" \
            --token="${{ env.VERCEL_TOKEN }}" \
            --scope="${{ env.VERCEL_ORG }}"

      # Prebuild to .vercel/output on the runner
      - name: Vercel build (prebuilt)
        run: |
          vercel build \
            --token="${{ env.VERCEL_TOKEN }}" \
            --scope="${{ env.VERCEL_ORG }}"

      # Deploy prebuilt artifact (no build on Vercel)
      - name: Deploy prebuilt
        id: deploy
        env:
          VC_TOKEN: ${{ env.VERCEL_TOKEN }}
          VC_TEAM:  ${{ env.VERCEL_ORG }}
        run: |
          set -e
          if [ "${{ github.ref_name }}" = "main" ]; then
            OUT="$(vercel deploy --prebuilt --prod --yes --token "$VC_TOKEN" --scope "$VC_TEAM")"
          else
            OUT="$(vercel deploy --prebuilt --yes --token "$VC_TOKEN" --scope "$VC_TEAM")"
          fi
          URL="$(printf "%s\n" "$OUT" | grep -Eo 'https?://[a-zA-Z0-9.-]+\.vercel\.app' | tail -1 || true)"
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Deployed: ${URL:-(no public URL)}"

      # For main: attach a GitHub Deployment card (no public prod URL in UI)
      - name: Create Deployment Card (main only)
        if: ${{ github.ref_name == 'main' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: dep } = await github.rest.repos.createDeployment({
              ...context.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            await github.rest.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: dep.id,
              state: 'success',
              environment: 'production'
            });

      # PRs: create GH Deployment card with public preview URL
      - name: Create Deployment Card (preview PRs)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const envName = `pr-${context.payload.pull_request.number}`;

            const { data: dep } = await github.rest.repos.createDeployment({
              ...context.repo,
              ref: context.sha,
              environment: envName,
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: dep.id,
              state: 'success',
              environment: envName,
              environment_url: '${{ steps.deploy.outputs.url }}'
            });