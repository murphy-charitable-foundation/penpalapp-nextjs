name: CI + Deploy (prebuilt)

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  deployments: write
  pull-requests: write
  issues: write

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG:   ${{ secrets.VERCEL_ORG_ID }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout repo
      - uses: actions/checkout@v4

      # Setup Node.js + cache
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci || npm install

      # Build project
      - name: Build app
        run: npm run build

      # Install Vercel CLI
      - name: Setup Vercel CLI
        run: npm i -g vercel@latest

      # Define target (preview or production)
      - name: Define target
        id: target
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=preview" >> $GITHUB_OUTPUT
          fi

      # Pull project config and environment vars
      - name: Pull Vercel settings
        run: |
          vercel pull --yes \
            --environment="${{ steps.target.outputs.env }}" \
            --token="${{ env.VERCEL_TOKEN }}" \
            --scope="${{ env.VERCEL_ORG }}"

      # Prebuild app (creates .vercel/output)
      - name: Prebuild Vercel output
        run: |
          vercel build \
            --token="${{ env.VERCEL_TOKEN }}" \
            --scope="${{ env.VERCEL_ORG }}"

      # Deploy prebuilt build to Vercel
      - name: Deploy prebuilt build
        id: deploy
        env:
          VC_TOKEN: ${{ env.VERCEL_TOKEN }}
          VC_TEAM:  ${{ env.VERCEL_ORG }}
          ENV:      ${{ steps.target.outputs.env }}
        run: |
          set -e
          ARGS=(deploy --prebuilt --yes --token "$VC_TOKEN" --scope "$VC_TEAM")
          [ "$ENV" = "production" ] && ARGS+=(--prod) || true
          OUT="$(vercel "${ARGS[@]}")"
          # take only public *.vercel.app URL (avoid private Inspect link)
          URL="$(printf "%s\n" "$OUT" | grep -Eo 'https?://[a-zA-Z0-9.-]+\.vercel\.app' | tail -1 || true)"
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "✅ Deployed to: ${URL:-(no public URL)}"

      - name: Comment Preview URL on PR
        if: ${{ github.event_name == 'pull_request' && steps.deploy.outputs.url != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: `✅ **Preview ready:** ${{ steps.deploy.outputs.url }}`
            })

      - name: Create Deployment Card (main only)
        if: ${{ github.ref_name == 'main' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: dep } = await github.rest.repos.createDeployment({
              ...context.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            await github.rest.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: dep.id,
              state: 'success',
              environment: 'production'
              // no environment_url on purpose (per Rez's requirement)
            });