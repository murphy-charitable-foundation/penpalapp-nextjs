{
    "sourceFile": "app/utils/useAnalytics.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1744046473635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744052275483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,37 +47,55 @@\n     }\n   }, [pagePath]);\n };\n \n-// Function to track uncaught errors\n-const logUncaughtError = (error, errorInfo = {}) => {\n-  if (analytics) {\n-    logEvent(analytics, \"uncaught_error\", {\n-      error_name: error.name || \"Unknown\",\n-      error_message: error.message || \"No message\",\n-      error_stack: error.stack || \"No stack trace\",\n-      ...errorInfo,\n-    });\n+class ErrorTracker {\n+  static instance = null;\n+  isInitialized = false;\n+\n+  constructor() {\n+    if (ErrorTracker.instance) {\n+      return ErrorTracker.instance;\n+    }\n+    ErrorTracker.instance = this;\n   }\n-};\n \n-// Set up global error handlers\n-if (typeof window !== \"undefined\") {\n-  // Handle regular uncaught errors\n-  window.onerror = (message, source, lineno, colno, error) => {\n-    logUncaughtError(error || new Error(message), {\n-      type: \"uncaught_error\",\n-      source: source,\n-      line: lineno,\n-      column: colno,\n-    });\n-  };\n+  logUncaughtError(error, errorInfo = {}) {\n+    if (analytics) {\n+      logEvent(analytics, \"uncaught_error\", {\n+        error_name: error.name || \"Unknown\",\n+        error_message: error.message || \"No message\",\n+        error_stack: error.stack || \"No stack trace\",\n+        ...errorInfo,\n+      });\n+    }\n+  }\n \n-  // Handle unhandled promise rejections\n-  window.onunhandledrejection = (event) => {\n-    logUncaughtError(event.reason, {\n-      type: \"unhandled_promise_rejection\",\n-    });\n-  };\n+  initialize() {\n+    if (typeof window !== \"undefined\" && !this.isInitialized) {\n+      // Handle regular uncaught errors\n+      window.onerror = (message, source, lineno, colno, error) => {\n+        this.logUncaughtError(error || new Error(message), {\n+          type: \"uncaught_error\",\n+          source: source,\n+          line: lineno,\n+          column: colno,\n+        });\n+      };\n+\n+      // Handle unhandled promise rejections\n+      window.onunhandledrejection = (event) => {\n+        this.logUncaughtError(event.reason, {\n+          type: \"unhandled_promise_rejection\",\n+        });\n+      };\n+\n+      this.isInitialized = true;\n+    }\n+  }\n }\n \n-export { usePageAnalytics, logUncaughtError };\n+// Create and initialize a single instance\n+const errorTracker = new ErrorTracker();\n+errorTracker.initialize();\n+\n+export { usePageAnalytics, errorTracker };\n"
                },
                {
                    "date": 1744052805224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n   }\n \n   logUncaughtError(error, errorInfo = {}) {\n     if (analytics) {\n+      console.log(\"Logging uncaught error\", error, errorInfo);\n       logEvent(analytics, \"uncaught_error\", {\n         error_name: error.name || \"Unknown\",\n         error_message: error.message || \"No message\",\n         error_stack: error.stack || \"No stack trace\",\n"
                },
                {
                    "date": 1744053034208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect } from \"react\";\n-import { logPageView } from \"@/app/firebaseConfig\";\n+import { logPageView, logError } from \"@/app/firebaseConfig\";\n \n const usePageAnalytics = (pagePath) => {\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n@@ -59,17 +59,9 @@\n     ErrorTracker.instance = this;\n   }\n \n   logUncaughtError(error, errorInfo = {}) {\n-    if (analytics) {\n-      console.log(\"Logging uncaught error\", error, errorInfo);\n-      logEvent(analytics, \"uncaught_error\", {\n-        error_name: error.name || \"Unknown\",\n-        error_message: error.message || \"No message\",\n-        error_stack: error.stack || \"No stack trace\",\n-        ...errorInfo,\n-      });\n-    }\n+    logError(error, errorInfo);\n   }\n \n   initialize() {\n     if (typeof window !== \"undefined\" && !this.isInitialized) {\n"
                },
                {
                    "date": 1744053127094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n     }\n   }, [pagePath]);\n };\n \n+// Track the uncaught errors\n class ErrorTracker {\n   static instance = null;\n   isInitialized = false;\n \n@@ -86,9 +87,8 @@\n     }\n   }\n }\n \n-// Create and initialize a single instance\n const errorTracker = new ErrorTracker();\n errorTracker.initialize();\n \n export { usePageAnalytics, errorTracker };\n"
                },
                {
                    "date": 1744054182398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,24 @@\n import { useEffect } from \"react\";\n-import { logPageView, logError } from \"@/app/firebaseConfig\";\n+import { logPageView, logError, logDeadClick } from \"@/app/firebaseConfig\";\n \n const usePageAnalytics = (pagePath) => {\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n+      // Log dead clicks\n+      document.addEventListener(\"click\", (e) => {\n+        // Check if the click was on an non-interactive element\n+        if (e.target.matches(\".non-interactive-area\")) {\n+          logDeadClick(\n+            e.clientX,\n+            e.clientY,\n+            e.target.tagName,\n+            window.location.pathname\n+          );\n+        }\n+      });\n+\n+      // Log page views and time spent on page\n       let startTime = Date.now();\n \n       const handlePageView = () => {\n         const viewTime = Math.round((Date.now() - startTime) / 1000); // Convert to seconds\n@@ -48,17 +62,17 @@\n   }, [pagePath]);\n };\n \n // Track the uncaught errors\n-class ErrorTracker {\n+class GlobalTracker {\n   static instance = null;\n   isInitialized = false;\n \n   constructor() {\n-    if (ErrorTracker.instance) {\n-      return ErrorTracker.instance;\n+    if (GlobalTracker.instance) {\n+      return GlobalTracker.instance;\n     }\n-    ErrorTracker.instance = this;\n+    GlobalTracker.instance = this;\n   }\n \n   logUncaughtError(error, errorInfo = {}) {\n     logError(error, errorInfo);\n@@ -87,8 +101,8 @@\n     }\n   }\n }\n \n-const errorTracker = new ErrorTracker();\n-errorTracker.initialize();\n+const globalTracker = new GlobalTracker();\n+globalTracker.initialize();\n \n-export { usePageAnalytics, errorTracker };\n+export { usePageAnalytics, globalTracker };\n"
                },
                {
                    "date": 1744054222694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n       // Log dead clicks\n       document.addEventListener(\"click\", (e) => {\n         // Check if the click was on an non-interactive element\n         if (e.target.matches(\".non-interactive-area\")) {\n+          console.log(\"dead click\");\n           logDeadClick(\n             e.clientX,\n             e.clientY,\n             e.target.tagName,\n"
                },
                {
                    "date": 1744054516401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,24 @@\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n       // Log dead clicks\n       document.addEventListener(\"click\", (e) => {\n-        // Check if the click was on an non-interactive element\n-        if (e.target.matches(\".non-interactive-area\")) {\n+        // 定义非交互元素标签列表\n+        const nonInteractiveElements = [\n+          \"P\",\n+          \"SPAN\",\n+          \"DIV\",\n+          \"H1\",\n+          \"H2\",\n+          \"H3\",\n+          \"H4\",\n+          \"H5\",\n+          \"H6\",\n+          \"IMG\",\n+        ];\n+\n+        // 检查点击的元素是否是非交互元素\n+        if (nonInteractiveElements.includes(e.target.tagName)) {\n           console.log(\"dead click\");\n           logDeadClick(\n             e.clientX,\n             e.clientY,\n"
                },
                {
                    "date": 1744054526503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n       // Log dead clicks\n       document.addEventListener(\"click\", (e) => {\n-        // 定义非交互元素标签列表\n         const nonInteractiveElements = [\n           \"P\",\n           \"SPAN\",\n           \"DIV\",\n"
                },
                {
                    "date": 1744054608746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,24 @@\n const usePageAnalytics = (pagePath) => {\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n       // Log dead clicks\n+      const nonInteractiveElements = [\n+        \"P\",\n+        \"SPAN\",\n+        \"DIV\",\n+        \"H1\",\n+        \"H2\",\n+        \"H3\",\n+        \"H4\",\n+        \"H5\",\n+        \"H6\",\n+        \"IMG\",\n+      ];\n+\n       document.addEventListener(\"click\", (e) => {\n-        const nonInteractiveElements = [\n-          \"P\",\n-          \"SPAN\",\n-          \"DIV\",\n-          \"H1\",\n-          \"H2\",\n-          \"H3\",\n-          \"H4\",\n-          \"H5\",\n-          \"H6\",\n-          \"IMG\",\n-        ];\n-\n         // 检查点击的元素是否是非交互元素\n+        console.log(e.target.tagName);\n         if (nonInteractiveElements.includes(e.target.tagName)) {\n           console.log(\"dead click\");\n           logDeadClick(\n             e.clientX,\n"
                },
                {
                    "date": 1744054672554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n         \"IMG\",\n       ];\n \n       document.addEventListener(\"click\", (e) => {\n-        // 检查点击的元素是否是非交互元素\n-        console.log(e.target.tagName);\n+        // check if the clicked element is a non-interactive element\n         if (nonInteractiveElements.includes(e.target.tagName)) {\n           console.log(\"dead click\");\n           logDeadClick(\n             e.clientX,\n"
                },
                {
                    "date": 1744056526084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,11 @@\n import { useEffect } from \"react\";\n-import { logPageView, logError, logDeadClick } from \"@/app/firebaseConfig\";\n+import {\n+  logPageView,\n+  logError,\n+  logDeadClick,\n+  logInternetDisconnection,\n+} from \"@/app/firebaseConfig\";\n \n const usePageAnalytics = (pagePath) => {\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n@@ -79,39 +84,57 @@\n // Track the uncaught errors\n class GlobalTracker {\n   static instance = null;\n   isInitialized = false;\n+  disconnectionStartTime = null;\n \n   constructor() {\n     if (GlobalTracker.instance) {\n       return GlobalTracker.instance;\n     }\n     GlobalTracker.instance = this;\n   }\n \n-  logUncaughtError(error, errorInfo = {}) {\n-    logError(error, errorInfo);\n+  addErrorListeners() {\n+    // Handle regular uncaught errors\n+    window.onerror = (message, source, lineno, colno, error) => {\n+      logError(error || new Error(message), {\n+        type: \"uncaught_error\",\n+        source: source,\n+        line: lineno,\n+        column: colno,\n+      });\n+    };\n+\n+    // Handle unhandled promise rejections\n+    window.onunhandledrejection = (event) => {\n+      logError(event.reason, {\n+        type: \"unhandled_promise_rejection\",\n+      });\n+    };\n   }\n \n+  initializeConnectivityTracking() {\n+    window.addEventListener(\"online\", () => {\n+      if (this.disconnectionStartTime) {\n+        const duration = Math.round(\n+          (Date.now() - this.disconnectionStartTime) / 1000\n+        );\n+        logInternetDisconnection(duration, true);\n+        this.disconnectionStartTime = null;\n+      }\n+    });\n+\n+    window.addEventListener(\"offline\", () => {\n+      this.disconnectionStartTime = Date.now();\n+      logInternetDisconnection(0, false);\n+    });\n+  }\n+\n   initialize() {\n     if (typeof window !== \"undefined\" && !this.isInitialized) {\n-      // Handle regular uncaught errors\n-      window.onerror = (message, source, lineno, colno, error) => {\n-        this.logUncaughtError(error || new Error(message), {\n-          type: \"uncaught_error\",\n-          source: source,\n-          line: lineno,\n-          column: colno,\n-        });\n-      };\n-\n-      // Handle unhandled promise rejections\n-      window.onunhandledrejection = (event) => {\n-        this.logUncaughtError(event.reason, {\n-          type: \"unhandled_promise_rejection\",\n-        });\n-      };\n-\n+      this.addErrorListeners();\n+      this.initializeConnectivityTracking();\n       this.isInitialized = true;\n     }\n   }\n }\n"
                },
                {
                    "date": 1744058366723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,20 @@\n   logDeadClick,\n   logInternetDisconnection,\n } from \"@/app/firebaseConfig\";\n \n+// Throttle function to limit the rate at which a function can fire\n+const throttle = (func, limit) => {\n+  let inThrottle;\n+  return function (...args) {\n+    if (!inThrottle) {\n+      func.apply(this, args);\n+      inThrottle = true;\n+      setTimeout(() => (inThrottle = false), limit);\n+    }\n+  };\n+};\n+\n const usePageAnalytics = (pagePath) => {\n   useEffect(() => {\n     if (typeof window !== \"undefined\") {\n       // Log dead clicks\n@@ -22,10 +34,10 @@\n         \"H6\",\n         \"IMG\",\n       ];\n \n-      document.addEventListener(\"click\", (e) => {\n-        // check if the clicked element is a non-interactive element\n+      // 创建节流后的处理函数\n+      const throttledDeadClickHandler = throttle((e) => {\n         if (nonInteractiveElements.includes(e.target.tagName)) {\n           console.log(\"dead click\");\n           logDeadClick(\n             e.clientX,\n@@ -33,10 +45,12 @@\n             e.target.tagName,\n             window.location.pathname\n           );\n         }\n-      });\n+      }, 1000); // 1秒的节流时间\n \n+      document.addEventListener(\"click\", throttledDeadClickHandler);\n+\n       // Log page views and time spent on page\n       let startTime = Date.now();\n \n       const handlePageView = () => {\n@@ -75,8 +89,9 @@\n         document.removeEventListener(\n           \"visibilitychange\",\n           handleVisibilityChange\n         );\n+        document.removeEventListener(\"click\", throttledDeadClickHandler);\n       };\n     }\n   }, [pagePath]);\n };\n"
                },
                {
                    "date": 1744058394585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n         \"H6\",\n         \"IMG\",\n       ];\n \n-      // 创建节流后的处理函数\n       const throttledDeadClickHandler = throttle((e) => {\n         if (nonInteractiveElements.includes(e.target.tagName)) {\n           console.log(\"dead click\");\n           logDeadClick(\n@@ -45,9 +44,9 @@\n             e.target.tagName,\n             window.location.pathname\n           );\n         }\n-      }, 1000); // 1秒的节流时间\n+      }, 300);\n \n       document.addEventListener(\"click\", throttledDeadClickHandler);\n \n       // Log page views and time spent on page\n"
                },
                {
                    "date": 1744058481636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n             e.target.tagName,\n             window.location.pathname\n           );\n         }\n-      }, 300);\n+      }, 500);\n \n       document.addEventListener(\"click\", throttledDeadClickHandler);\n \n       // Log page views and time spent on page\n"
                },
                {
                    "date": 1744068632478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n     if (typeof window !== \"undefined\") {\n       // Log dead clicks\n       const nonInteractiveElements = [\n         \"P\",\n-        \"SPAN\",\n         \"DIV\",\n         \"H1\",\n         \"H2\",\n         \"H3\",\n"
                }
            ],
            "date": 1744046473635,
            "name": "Commit-0",
            "content": "import { useEffect } from \"react\";\nimport { logPageView } from \"@/app/firebaseConfig\";\n\nconst usePageAnalytics = (pagePath) => {\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      let startTime = Date.now();\n\n      const handlePageView = () => {\n        const viewTime = Math.round((Date.now() - startTime) / 1000); // Convert to seconds\n        if (viewTime > 0) {\n          logPageView(pagePath, viewTime);\n        }\n      };\n\n      if (document.readyState === \"complete\") {\n        startTime = Date.now();\n      } else {\n        window.addEventListener(\"load\", () => {\n          startTime = Date.now();\n        });\n      }\n\n      // handle page visibility change (switch tabs or minimize browser)\n      const handleVisibilityChange = () => {\n        if (document.visibilityState === \"hidden\") {\n          handlePageView();\n        } else if (document.visibilityState === \"visible\") {\n          startTime = Date.now(); // reset timer\n        }\n      };\n\n      // handle page close or redirect\n      window.addEventListener(\"beforeunload\", handlePageView);\n      // handle page visibility change\n      document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n      // cleanup function: handle component unmount (route change) and page close\n      return () => {\n        handlePageView(); // record time when component unmounts\n        window.removeEventListener(\"beforeunload\", handlePageView);\n        document.removeEventListener(\n          \"visibilitychange\",\n          handleVisibilityChange\n        );\n      };\n    }\n  }, [pagePath]);\n};\n\n// Function to track uncaught errors\nconst logUncaughtError = (error, errorInfo = {}) => {\n  if (analytics) {\n    logEvent(analytics, \"uncaught_error\", {\n      error_name: error.name || \"Unknown\",\n      error_message: error.message || \"No message\",\n      error_stack: error.stack || \"No stack trace\",\n      ...errorInfo,\n    });\n  }\n};\n\n// Set up global error handlers\nif (typeof window !== \"undefined\") {\n  // Handle regular uncaught errors\n  window.onerror = (message, source, lineno, colno, error) => {\n    logUncaughtError(error || new Error(message), {\n      type: \"uncaught_error\",\n      source: source,\n      line: lineno,\n      column: colno,\n    });\n  };\n\n  // Handle unhandled promise rejections\n  window.onunhandledrejection = (event) => {\n    logUncaughtError(event.reason, {\n      type: \"unhandled_promise_rejection\",\n    });\n  };\n}\n\nexport { usePageAnalytics, logUncaughtError };\n"
        }
    ]
}