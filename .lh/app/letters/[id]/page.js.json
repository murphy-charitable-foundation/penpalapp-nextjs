{
    "sourceFile": "app/letters/[id]/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744045163678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744067592976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n import ProfileImage from \"@/components/general/ProfileImage\";\n import { FaExclamationCircle } from \"react-icons/fa\";\n import ReportPopup from \"../../../components/letter/ReportPopup\";\n import ConfirmReportPopup from \"../../../components/letter/ConfirmReportPopup\";\n-import { logButtonEvent } from \"@/app/firebaseConfig\";\n+import { logButtonEvent, logLoadingTime } from \"@/app/firebaseConfig\";\n import { usePageAnalytics } from \"@/app/utils/useAnalytics\";\n \n import { useRouter } from \"next/navigation\";\n \n@@ -95,8 +95,9 @@\n     setLetterContent(d.content);\n   };\n \n   useEffect(() => {\n+    const startTime = performance.now();\n     if (user) {\n       const userDocRef = doc(db, \"users\", user.uid);\n       setUserRef(userDocRef);\n       const fetchMessages = async () => {\n@@ -108,8 +109,16 @@\n         setLastVisible(newLastVisible); // Store last visible letter for pagination\n         setHasMoreMessages(messages.length === PAGINATION_INCREMENT); // Assuming 10 is the page limit\n       };\n       fetchMessages();\n+      requestAnimationFrame(() => {\n+        setTimeout(() => {\n+          const endTime = performance.now();\n+          const loadTime = endTime - startTime;\n+          console.log(`Page render time: ${loadTime}ms`);\n+          logLoadingTime(\"/letters/[id]\", loadTime);\n+        }, 0);\n+      });\n     }\n   }, [user]);\n \n   useEffect(() => {\n"
                }
            ],
            "date": 1744045163678,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport Image from \"next/image\";\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { db } from \"../../firebaseConfig\"; // Adjust this path as necessary\nimport { collection, doc } from \"firebase/firestore\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\nimport { MdSend } from \"react-icons/md\";\nimport { BsPaperclip } from \"react-icons/bs\";\nimport { IoMdClose } from \"react-icons/io\";\nimport { MdInsertDriveFile } from \"react-icons/md\";\nimport BottomNavBar from \"@/components/bottom-nav-bar\";\nimport { uploadFile } from \"@/app/lib/uploadFile\";\nimport {\n  fetchDraft,\n  fetchLetterbox,\n  fetchRecipients,\n  sendLetter,\n} from \"@/app/utils/letterboxFunctions\";\nimport ProfileImage from \"@/components/general/ProfileImage\";\nimport { FaExclamationCircle } from \"react-icons/fa\";\nimport ReportPopup from \"../../../components/letter/ReportPopup\";\nimport ConfirmReportPopup from \"../../../components/letter/ConfirmReportPopup\";\nimport { logButtonEvent } from \"@/app/firebaseConfig\";\nimport { usePageAnalytics } from \"@/app/utils/useAnalytics\";\n\nimport { useRouter } from \"next/navigation\";\n\nimport * as Sentry from \"@sentry/nextjs\";\n\nexport default function Page({ params }) {\n  const { id } = params;\n  const auth = getAuth();\n  const router = useRouter();\n\n  const [letterContent, setLetterContent] = useState(\"\");\n  const [debounce, setDebounce] = useState(0);\n  const [user, setUser] = useState(null);\n  const [isFileModalOpen, setIsFileModalOpen] = useState(false);\n  const [draft, setDraft] = useState(null);\n  const [userRef, setUserRef] = useState(null);\n  const [allMessages, setAllMessages] = useState([]);\n  const [recipients, setRecipients] = useState(null);\n  const [lettersRef, setLettersRef] = useState(null);\n  const [attachments, setAttachments] = useState([]);\n  const [uploadProgress, setUploadProgress] = useState(null);\n  const [lastVisible, setLastVisible] = useState(null); // To store the last visible letter for pagination\n  const [loadingMore, setLoadingMore] = useState(false); // To track if loading more is in progress\n  const [hasMoreMessages, setHasMoreMessages] = useState(true); // Track if there are more messages to load\n  const [showReportPopup, setShowReportPopup] = useState(false);\n  const [showConfirmReportPopup, setShowConfirmReportPopup] = useState(false);\n  const [content, setContent] = useState(null);\n  const [sender, setSender] = useState(null);\n  const PAGINATION_INCREMENT = 20;\n  usePageAnalytics(`/letters/letterId`);\n  const handleSendLetter = async () => {\n    if (!letterContent.trim() || !recipients?.length) {\n      alert(\"Please fill in the letter content and select a recipient.\");\n      return;\n    }\n\n    if (!auth.currentUser) {\n      alert(\"Sender not identified, please log in.\");\n      return;\n    }\n    const letterUserRef = userRef ?? doc(db, \"users\", auth.currentUser.uid); // TODO: make population of userRef blocking and cached to be available throughout the call\n    const letterData = {\n      content: letterContent,\n      sent_by: letterUserRef,\n      status: \"sent\",\n      created_at: new Date(),\n      deleted: null,\n    };\n\n    const letterStatus = await sendLetter(letterData, lettersRef, draft.id);\n    if (letterStatus) {\n      setLetterContent(\"\");\n      setAttachments([]);\n    } else {\n      Sentry.captureException(e);\n      alert(\"Failed to send your letter, please try again.\");\n    }\n\n    const { messages, lastVisible: newLastVisible } = await fetchLetterbox(\n      id,\n      PAGINATION_INCREMENT\n    );\n    setAllMessages(messages);\n    setLastVisible(newLastVisible);\n    setDraft(null);\n    const d = await fetchDraft(id, userRef, true);\n    setDraft(d);\n    setLetterContent(d.content);\n  };\n\n  useEffect(() => {\n    if (user) {\n      const userDocRef = doc(db, \"users\", user.uid);\n      setUserRef(userDocRef);\n      const fetchMessages = async () => {\n        const { messages, lastVisible: newLastVisible } = await fetchLetterbox(\n          id,\n          5\n        );\n        setAllMessages(messages);\n        setLastVisible(newLastVisible); // Store last visible letter for pagination\n        setHasMoreMessages(messages.length === PAGINATION_INCREMENT); // Assuming 10 is the page limit\n      };\n      fetchMessages();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const getSelectedUser = async () => {\n      if (recipients?.length) {\n        const letterboxRef = doc(collection(db, \"letterbox\"), id);\n        const lRef = collection(letterboxRef, \"letters\");\n        setLettersRef(lRef);\n        const d = await fetchDraft(id, userRef, true);\n        setDraft(d);\n        setLetterContent(d.content);\n      }\n    };\n    getSelectedUser();\n  }, [recipients]);\n\n  useEffect(() => {\n    setDebounce(debounce + 1);\n    const updateDraft = async () => {\n      if (userRef && lettersRef) {\n        const letterData = {\n          content: letterContent,\n          sent_by: userRef,\n          created_at: new Date(),\n          deleted: null,\n          status: \"draft\",\n          attachments,\n        };\n        await sendLetter(letterData, lettersRef, draft.id);\n      }\n    };\n    if (debounce >= 20) {\n      updateDraft();\n      setDebounce(0);\n    }\n  }, [letterContent]);\n\n  const handleLoadMore = async () => {\n    setLoadingMore(true); // Set loading state to true while fetching more messages\n    const { messages, lastVisible: newLastVisible } = await fetchLetterbox(\n      id,\n      PAGINATION_INCREMENT,\n      lastVisible\n    );\n    setAllMessages((prevMessages) => [...prevMessages, ...messages]);\n    setLastVisible(newLastVisible); // Update lastVisible with the new last document\n    setHasMoreMessages(messages.length === PAGINATION_INCREMENT); // If fewer than 10 messages are returned, no more messages to load\n    setLoadingMore(false); // Reset loading state\n  };\n\n  const handleChange = (event) => {\n    const selectedFile = event.target.files[0];\n    handleUpload(selectedFile);\n  };\n\n  const onUploadComplete = (url) => setAttachments([...attachments, url]);\n\n  const handleUpload = async (file) => {\n    uploadFile(\n      file,\n      `uploads/letterbox/${id}/${file.name}`,\n      setUploadProgress,\n      (error) => console.error(\"Upload error:\", error),\n      onUploadComplete\n    );\n  };\n\n  const FileModal = () => (\n    <div className=\"fixed inset-0 flex justify-center items-center z-50 bg-black bg-opacity-40\">\n      <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full h-[90%]\">\n        <div className=\"flex relative\">\n          <button\n            onClick={() => setIsFileModalOpen(false)}\n            className=\"rounded-lg transition-colors duration-150 h-6 w-6 absolute top-0 left-0\"\n          >\n            <IoMdClose className=\"h-full w-full\" />\n          </button>\n          <h3 className=\"font-semibold text-xl text-gray-800 my-0 mx-auto\">\n            Files\n          </h3>\n        </div>\n        <input\n          type=\"file\"\n          hidden\n          onChange={handleChange}\n          disabled={uploadProgress > 0 && uploadProgress < 100}\n          id=\"raised-button-file\"\n        />\n        <label\n          htmlFor=\"raised-button-file\"\n          className=\"flex items-center border border-[#603A35] px-4 py-2 rounded-md mt-4 w-[40%] cursor-pointer\"\n        >\n          <MdInsertDriveFile className=\"mr-2 fill-[#603A35] h-6 w-6\" />\n          Select a file\n        </label>\n\n        <h3 className=\"font-600 mt-4\">Selected</h3>\n        {attachments.map((att, index) => (\n          <div key={index}>\n            <img src={att} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    const populateRecipients = async () => {\n      try {\n        const members = await fetchRecipients(id);\n        setRecipients(members);\n      } catch (e) {\n        console.error(\"err fetching members\", e);\n      }\n    };\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      if (currentUser) {\n        setUser(currentUser);\n        populateRecipients();\n      } else {\n        setUser(null);\n        router.push(\"/login\");\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <div>\n      {showReportPopup && (\n        <ReportPopup\n          setShowPopup={setShowReportPopup}\n          setShowConfirmReportPopup={setShowConfirmReportPopup}\n          sender={sender}\n          content={content}\n        />\n      )}\n      {showConfirmReportPopup && (\n        <ConfirmReportPopup setShowPopup={setShowConfirmReportPopup} />\n      )}\n\n      <div className=\"min-h-screen bg-[#E5E7EB] p-4\">\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-300 bg-[#FAFAFA]\">\n            <Link href=\"/\">\n              <button onClick={() => window.history.back()}>\n                <img src=\"/closeicon.svg\" />\n              </button>\n            </Link>\n            <button className=\"opacity-0\">{\"<\"}</button>\n            <div className=\"flex justify-between items-center p-4\">\n              <span className=\"text-black\">{attachments.length} files</span>\n              <div className=\"space-x-2\">\n                <button\n                  className=\"text-black p-2 rounded-full\"\n                  onClick={() => setIsFileModalOpen(true)}\n                >\n                  <BsPaperclip className=\"h-6 w-6 rotate-90\" />\n                </button>\n                <button\n                  className=\"text-black p-2 rounded-full\"\n                  onClick={handleSendLetter}\n                >\n                  <MdSend className=\"h-6 w-6\" />\n                </button>\n                <button className=\"text-black p-2 rounded-full\">\n                  <RiDeleteBin6Line className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex  space-x-6 p-4 bg-[#F3F4F6] rounded-t-lg\">\n            {recipients?.length &&\n              recipients.map((recipient) => (\n                <div key={recipient?.first_name?.[0]}>\n                  <ProfileImage\n                    photo_uri={recipient?.photo_uri}\n                    first_name={recipient?.first_name}\n                    size={20}\n                  />\n                  <div key={`${recipient?.first_name?.[0]}_`}>\n                    <h2 className=\"font-bold text-black\">\n                      {recipient?.first_name} {recipient?.last_name}\n                    </h2>\n                    <p className=\"text-sm text-gray-500\">\n                      {recipient?.country}\n                    </p>\n                  </div>\n                </div>\n              ))}\n          </div>\n\n          {isFileModalOpen && <FileModal />}\n\n          <div className=\"flex flex-col bg-grey gap-[8px] bg-[#F5F5F5]\">\n            {allMessages?.length ? (\n              allMessages.map((message, index) => (\n                <div\n                  key={index}\n                  className={`w-[35%] flex bg-white p-4 rounded-lg text-gray-600 mb-4 ${\n                    message.sent_by.id === userRef.id && \"self-end\"\n                  }`}\n                >\n                  <div className=\"flex flex-col w-[90%]\">\n                    {message?.attachments?.length ? (\n                      <Image\n                        alt=\"attachment\"\n                        width={100}\n                        height={100}\n                        src={message.attachments[0]}\n                      />\n                    ) : null}\n                    <span>{message.content}</span>\n                    <section className=\"px-5\">\n                      <div className=\"flex justify-end mb-2\">\n                        <FaExclamationCircle\n                          className=\"cursor-pointer\"\n                          onClick={() => {\n                            setSender(message.sent_by.id);\n                            setContent(message.content);\n                            setShowReportPopup(true);\n                          }}\n                        />\n                      </div>\n                    </section>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <span>No messages</span>\n            )}\n\n            {hasMoreMessages && !loadingMore && (\n              <button\n                onClick={handleLoadMore}\n                className=\"py-2 px-4 mt-4 mb-8 bg-blue-500 text-white rounded\"\n              >\n                Load More\n              </button>\n            )}\n\n            {loadingMore && <span>Loading...</span>}\n          </div>\n          <textarea\n            className=\"w-full p-4 text-black bg-[#ffffff] rounded-lg border-teal-500\"\n            rows=\"8\"\n            placeholder=\"Tap to write letter...\"\n            value={letterContent}\n            onChange={(e) => setLetterContent(e.target.value)}\n          />\n\n          <div className=\"text-right text-sm p-4 mt-8 text-gray-600\">\n            {letterContent.length} / 1000\n          </div>\n        </div>\n        <BottomNavBar />\n        {isFileModalOpen && <FileModal />}\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}