{
    "sourceFile": "app/letterhome/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744045163611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744057735287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+\"use client\";\n+\n+import { useState, useEffect } from \"react\";\n+import Link from \"next/link\";\n+import { db, auth } from \"../firebaseConfig\";\n+import { onAuthStateChanged } from \"firebase/auth\";\n+import { doc, getDoc } from \"firebase/firestore\";\n+import BottomNavBar from \"@/components/bottom-nav-bar\";\n+import * as Sentry from \"@sentry/nextjs\";\n+import { useRouter } from \"next/navigation\";\n+import { FaUserCircle, FaCog, FaBell, FaPen } from \"react-icons/fa\";\n+import { logButtonEvent, logLoadingTime } from \"@/app/firebaseConfig\";\n+import { usePageAnalytics } from \"@/app/utils/useAnalytics\";\n+import {\n+  fetchDraft,\n+  fetchLetterbox,\n+  fetchLetterboxes,\n+  fetchRecipients,\n+} from \"../utils/letterboxFunctions\";\n+import { deadChat, iterateLetterBoxes } from \"../utils/deadChat\";\n+import ProfileImage from \"@/components/general/ProfileImage\";\n+\n+export default function Home() {\n+  const [userName, setUserName] = useState(\"\");\n+  const [userType, setUserType] = useState(\"\");\n+  const [country, setCountry] = useState(\"\");\n+  const [letters, setLetters] = useState([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState(\"\");\n+  const [profileImage, setProfileImage] = useState(\"\");\n+  const router = useRouter();\n+  usePageAnalytics(\"/letterhome\");\n+  useEffect(() => {\n+    let loadingStartTime = new Date();\n+\n+    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n+      setIsLoading(true);\n+\n+      if (!user) {\n+        setError(\"No user logged in.\");\n+        setIsLoading(false);\n+        router.push(\"/login\");\n+        return;\n+      }\n+\n+      try {\n+        // Fetch user data\n+        const uid = user.uid;\n+        const docRef = doc(db, \"users\", uid);\n+        const docSnap = await getDoc(docRef);\n+\n+        if (docSnap.exists()) {\n+          const userData = docSnap.data();\n+          setUserName(userData.first_name || \"Unknown User\");\n+          setCountry(userData.country || \"Unknown Country\");\n+          setUserType(userData.user_type || \"Unknown Type\");\n+          setProfileImage(userData?.photo_uri || \"\");\n+        } else {\n+          console.log(\"No such document!\");\n+          setError(\"User data not found.\");\n+        }\n+\n+        // Fetch letterboxes\n+        const letterboxes = await fetchLetterboxes();\n+        if (letterboxes && letterboxes.length > 0) {\n+          const letterboxIds = letterboxes.map((l) => l.id);\n+          let fetchedLetters = [];\n+\n+          for (const id of letterboxIds) {\n+            const letterbox = { id };\n+            const userRef = doc(db, \"users\", user.uid);\n+            const draft = await fetchDraft(id, userRef, true);\n+\n+            if (draft) {\n+              letterbox.letters = [draft];\n+            } else {\n+              letterbox.letters = await fetchLetterbox(id, 1);\n+            }\n+            fetchedLetters.push(letterbox);\n+          }\n+\n+          // Fetch recipients for each letterbox\n+          for await (const l of fetchedLetters) {\n+            const rec = await fetchRecipients(l.id);\n+            l.recipients = rec;\n+          }\n+\n+          setLetters(fetchedLetters);\n+          logLoadingTime(\n+            \"/letterhome\",\n+            new Date().getTime() - loadingStartTime.getTime()\n+          );\n+        }\n+      } catch (err) {\n+        console.error(\"Error fetching data:\", err);\n+        Sentry.captureException(err);\n+        setError(\"Failed to load data.\");\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    });\n+\n+    return () => unsubscribe();\n+  }, [router]);\n+\n+  return (\n+    <div className=\"bg-gray-100 min-h-screen py-6\">\n+      {isLoading ? (\n+        <p>Loading...</p>\n+      ) : error ? (\n+        <p className=\"text-red-500\">{error}</p>\n+      ) : (\n+        <div className=\"max-w-lg mx-auto bg-white shadow-md rounded-lg overflow-hidden\">\n+          <header className=\"flex justify-between items-center bg-blue-100 p-5 border-b border-gray-200\">\n+            <Link href=\"/profile\">\n+              <button className=\"flex items-center text-gray-700\">\n+                <ProfileImage photo_uri={profileImage} first_name={userName} />\n+                <div className=\"ml-3\">\n+                  <div className=\"font-semibold text-lg\">{userName}</div>\n+                  <div className=\"text-sm text-gray-600\">{country}</div>\n+                </div>\n+              </button>\n+            </Link>\n+\n+            <div className=\"flex items-center space-x-4\">\n+              <Link href=\"/settings\">\n+                <button\n+                  onClick={() =>\n+                    logButtonEvent(\"Settings clicked!\", \"/letterhome\")\n+                  }\n+                  className=\"text-gray-700 hover:text-blue-600\"\n+                >\n+                  <FaCog className=\"h-7 w-7\" />\n+                </button>\n+              </Link>\n+              <Link href=\"/discover\">\n+                <button\n+                  onClick={() =>\n+                    logButtonEvent(\"Discover clicked!\", \"/letterhome\")\n+                  }\n+                  className=\"text-gray-700 hover:text-blue-600\"\n+                >\n+                  <FaBell className=\"h-7 w-7\" />\n+                </button>\n+              </Link>\n+              <Link href=\"/letterwrite\">\n+                <button\n+                  onClick={() =>\n+                    logButtonEvent(\"Write letter clicked!\", \"/letterhome\")\n+                  }\n+                  className=\"text-gray-700 hover:text-blue-600\"\n+                >\n+                  <FaPen className=\"h-7 w-7\" />\n+                </button>\n+              </Link>\n+            </div>\n+          </header>\n+\n+          <main className=\"p-6\">\n+            <section className=\"mt-8\">\n+              <h2 className=\"font-bold text-xl mb-4 text-gray-800 flex justify-between items-center\">\n+                Last letters\n+                <Link href=\"/letterhome\">\n+                  <button\n+                    onClick={() =>\n+                      logButtonEvent(\"Show more clicked!\", \"/letterhome\")\n+                    }\n+                    className=\"px-3 py-1 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-300\"\n+                  >\n+                    Show more\n+                  </button>\n+                </Link>\n+              </h2>\n+              {letters.length > 0 ? (\n+                letters.map((letter, i) => (\n+                  <a\n+                    key={letter.id + \"_\" + i}\n+                    href={`/letters/${letter.id}`}\n+                    className=\"flex items-center p-4 mb-3 rounded-lg bg-white shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer\"\n+                  >\n+                    <div className=\"flex-grow\">\n+                      {letter.recipients?.map((rec) => (\n+                        <div key={rec.id} className=\"flex mt-3\">\n+                          <ProfileImage\n+                            photo_uri={rec?.photo_uri}\n+                            first_name={rec?.first_name}\n+                          />\n+                          <div className=\"flex flex-col\">\n+                            <div className=\"flex\">\n+                              {letter.letters[0].status === \"draft\" && (\n+                                <h4 className=\"mr-2\">[DRAFT]</h4>\n+                              )}\n+                              <h3 className=\"font-semibold text-gray-800\">\n+                                {rec.first_name} {rec.last_name}\n+                              </h3>\n+                            </div>\n+                            <div>{rec.country}</div>\n+                          </div>\n+                        </div>\n+                      ))}\n+                      <p className=\"text-gray-600 truncate\">\n+                        {letter.letters[0].content ?? \"\"}\n+                      </p>\n+                      <span className=\"text-xs text-gray-400\">\n+                        {letter.letters[0].received}\n+                      </span>\n+                    </div>\n+                  </a>\n+                ))\n+              ) : (\n+                <p className=\"text-gray-500\">No letters found.</p>\n+              )}\n+            </section>\n+          </main>\n+          <BottomNavBar />\n+        </div>\n+      )}\n+      {userType === \"admin\" && (\n+        <button\n+          className=\"flex bg-black text-white rounded py-4 px-4 mt-4 mx-auto\"\n+          onClick={() => {\n+            logButtonEvent(\"Check For Inactive Chats clicked!\", \"/letterhome\");\n+            iterateLetterBoxes();\n+          }}\n+        >\n+          Check For Inactive Chats\n+        </button>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1744067704742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,9 @@\n   const [profileImage, setProfileImage] = useState(\"\");\n   const router = useRouter();\n   usePageAnalytics(\"/letterhome\");\n   useEffect(() => {\n-    let loadingStartTime = new Date();\n-\n+    const startTime = performance.now();\n     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n       setIsLoading(true);\n \n       if (!user) {\n@@ -85,238 +84,18 @@\n             l.recipients = rec;\n           }\n \n           setLetters(fetchedLetters);\n-          logLoadingTime(\n-            \"/letterhome\",\n-            new Date().getTime() - loadingStartTime.getTime()\n-          );\n-        }\n-      } catch (err) {\n-        console.error(\"Error fetching data:\", err);\n-        Sentry.captureException(err);\n-        setError(\"Failed to load data.\");\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    });\n \n-    return () => unsubscribe();\n-  }, [router]);\n-\n-  return (\n-    <div className=\"bg-gray-100 min-h-screen py-6\">\n-      {isLoading ? (\n-        <p>Loading...</p>\n-      ) : error ? (\n-        <p className=\"text-red-500\">{error}</p>\n-      ) : (\n-        <div className=\"max-w-lg mx-auto bg-white shadow-md rounded-lg overflow-hidden\">\n-          <header className=\"flex justify-between items-center bg-blue-100 p-5 border-b border-gray-200\">\n-            <Link href=\"/profile\">\n-              <button className=\"flex items-center text-gray-700\">\n-                <ProfileImage photo_uri={profileImage} first_name={userName} />\n-                <div className=\"ml-3\">\n-                  <div className=\"font-semibold text-lg\">{userName}</div>\n-                  <div className=\"text-sm text-gray-600\">{country}</div>\n-                </div>\n-              </button>\n-            </Link>\n-\n-            <div className=\"flex items-center space-x-4\">\n-              <Link href=\"/settings\">\n-                <button\n-                  onClick={() =>\n-                    logButtonEvent(\"Settings clicked!\", \"/letterhome\")\n-                  }\n-                  className=\"text-gray-700 hover:text-blue-600\"\n-                >\n-                  <FaCog className=\"h-7 w-7\" />\n-                </button>\n-              </Link>\n-              <Link href=\"/discover\">\n-                <button\n-                  onClick={() =>\n-                    logButtonEvent(\"Discover clicked!\", \"/letterhome\")\n-                  }\n-                  className=\"text-gray-700 hover:text-blue-600\"\n-                >\n-                  <FaBell className=\"h-7 w-7\" />\n-                </button>\n-              </Link>\n-              <Link href=\"/letterwrite\">\n-                <button\n-                  onClick={() =>\n-                    logButtonEvent(\"Write letter clicked!\", \"/letterhome\")\n-                  }\n-                  className=\"text-gray-700 hover:text-blue-600\"\n-                >\n-                  <FaPen className=\"h-7 w-7\" />\n-                </button>\n-              </Link>\n-            </div>\n-          </header>\n-\n-          <main className=\"p-6\">\n-            <section className=\"mt-8\">\n-              <h2 className=\"font-bold text-xl mb-4 text-gray-800 flex justify-between items-center\">\n-                Last letters\n-                <Link href=\"/letterhome\">\n-                  <button\n-                    onClick={() =>\n-                      logButtonEvent(\"Show more clicked!\", \"/letterhome\")\n-                    }\n-                    className=\"px-3 py-1 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-300\"\n-                  >\n-                    Show more\n-                  </button>\n-                </Link>\n-              </h2>\n-              {letters.length > 0 ? (\n-                letters.map((letter, i) => (\n-                  <a\n-                    key={letter.id + \"_\" + i}\n-                    href={`/letters/${letter.id}`}\n-                    className=\"flex items-center p-4 mb-3 rounded-lg bg-white shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer\"\n-                  >\n-                    <div className=\"flex-grow\">\n-                      {letter.recipients?.map((rec) => (\n-                        <div key={rec.id} className=\"flex mt-3\">\n-                          <ProfileImage\n-                            photo_uri={rec?.photo_uri}\n-                            first_name={rec?.first_name}\n-                          />\n-                          <div className=\"flex flex-col\">\n-                            <div className=\"flex\">\n-                              {letter.letters[0].status === \"draft\" && (\n-                                <h4 className=\"mr-2\">[DRAFT]</h4>\n-                              )}\n-                              <h3 className=\"font-semibold text-gray-800\">\n-                                {rec.first_name} {rec.last_name}\n-                              </h3>\n-                            </div>\n-                            <div>{rec.country}</div>\n-                          </div>\n-                        </div>\n-                      ))}\n-                      <p className=\"text-gray-600 truncate\">\n-                        {letter.letters[0].content ?? \"\"}\n-                      </p>\n-                      <span className=\"text-xs text-gray-400\">\n-                        {letter.letters[0].received}\n-                      </span>\n-                    </div>\n-                  </a>\n-                ))\n-              ) : (\n-                <p className=\"text-gray-500\">No letters found.</p>\n-              )}\n-            </section>\n-          </main>\n-          <BottomNavBar />\n-        </div>\n-      )}\n-      {userType === \"admin\" && (\n-        <button\n-          className=\"flex bg-black text-white rounded py-4 px-4 mt-4 mx-auto\"\n-          onClick={() => {\n-            logButtonEvent(\"Check For Inactive Chats clicked!\", \"/letterhome\");\n-            iterateLetterBoxes();\n-          }}\n-        >\n-          Check For Inactive Chats\n-        </button>\n-      )}\n-    </div>\n-  );\n-}\n-\"use client\";\n-\n-import { useState, useEffect } from \"react\";\n-import Link from \"next/link\";\n-import { db, auth } from \"../firebaseConfig\";\n-import { onAuthStateChanged } from \"firebase/auth\";\n-import { doc, getDoc } from \"firebase/firestore\";\n-import BottomNavBar from \"@/components/bottom-nav-bar\";\n-import * as Sentry from \"@sentry/nextjs\";\n-import { useRouter } from \"next/navigation\";\n-import { FaUserCircle, FaCog, FaBell, FaPen } from \"react-icons/fa\";\n-import { logButtonEvent } from \"@/app/firebaseConfig\";\n-import { usePageAnalytics } from \"@/app/utils/useAnalytics\";\n-import {\n-  fetchDraft,\n-  fetchLetterbox,\n-  fetchLetterboxes,\n-  fetchRecipients,\n-} from \"../utils/letterboxFunctions\";\n-import { deadChat, iterateLetterBoxes } from \"../utils/deadChat\";\n-import ProfileImage from \"@/components/general/ProfileImage\";\n-\n-export default function Home() {\n-  const [userName, setUserName] = useState(\"\");\n-  const [userType, setUserType] = useState(\"\");\n-  const [country, setCountry] = useState(\"\");\n-  const [letters, setLetters] = useState([]);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [error, setError] = useState(\"\");\n-  const [profileImage, setProfileImage] = useState(\"\");\n-  const router = useRouter();\n-  usePageAnalytics(\"/letterhome\");\n-  useEffect(() => {\n-    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n-      setIsLoading(true);\n-\n-      if (!user) {\n-        setError(\"No user logged in.\");\n-        setIsLoading(false);\n-        router.push(\"/login\");\n-        return;\n-      }\n-\n-      try {\n-        // Fetch user data\n-        const uid = user.uid;\n-        const docRef = doc(db, \"users\", uid);\n-        const docSnap = await getDoc(docRef);\n-\n-        if (docSnap.exists()) {\n-          const userData = docSnap.data();\n-          setUserName(userData.first_name || \"Unknown User\");\n-          setCountry(userData.country || \"Unknown Country\");\n-          setUserType(userData.user_type || \"Unknown Type\");\n-          setProfileImage(userData?.photo_uri || \"\");\n-        } else {\n-          console.log(\"No such document!\");\n-          setError(\"User data not found.\");\n+          requestAnimationFrame(() => {\n+            setTimeout(() => {\n+              const endTime = performance.now();\n+              const loadTime = endTime - startTime;\n+              console.log(`Page render time: ${loadTime}ms`);\n+              logLoadingTime(\"/letterhome\", loadTime);\n+            }, 0);\n+          });\n         }\n-\n-        // Fetch letterboxes\n-        const letterboxes = await fetchLetterboxes();\n-        if (letterboxes && letterboxes.length > 0) {\n-          const letterboxIds = letterboxes.map((l) => l.id);\n-          let fetchedLetters = [];\n-\n-          for (const id of letterboxIds) {\n-            const letterbox = { id };\n-            const userRef = doc(db, \"users\", user.uid);\n-            const draft = await fetchDraft(id, userRef, true);\n-\n-            if (draft) {\n-              letterbox.letters = [draft];\n-            } else {\n-              letterbox.letters = await fetchLetterbox(id, 1);\n-            }\n-            fetchedLetters.push(letterbox);\n-          }\n-\n-          // Fetch recipients for each letterbox\n-          for await (const l of fetchedLetters) {\n-            const rec = await fetchRecipients(l.id);\n-            l.recipients = rec;\n-          }\n-\n-          setLetters(fetchedLetters);\n-        }\n       } catch (err) {\n         console.error(\"Error fetching data:\", err);\n         Sentry.captureException(err);\n         setError(\"Failed to load data.\");\n"
                }
            ],
            "date": 1744045163611,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { doc, getDoc } from \"firebase/firestore\";\nimport BottomNavBar from \"@/components/bottom-nav-bar\";\nimport * as Sentry from \"@sentry/nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport { FaUserCircle, FaCog, FaBell, FaPen } from \"react-icons/fa\";\nimport { logButtonEvent } from \"@/app/firebaseConfig\";\nimport { usePageAnalytics } from \"@/app/utils/useAnalytics\";\nimport {\n  fetchDraft,\n  fetchLetterbox,\n  fetchLetterboxes,\n  fetchRecipients,\n} from \"../utils/letterboxFunctions\";\nimport { deadChat, iterateLetterBoxes } from \"../utils/deadChat\";\nimport ProfileImage from \"@/components/general/ProfileImage\";\n\nexport default function Home() {\n  const [userName, setUserName] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [profileImage, setProfileImage] = useState(\"\");\n  const router = useRouter();\n  usePageAnalytics(\"/letterhome\");\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setIsLoading(true);\n\n      if (!user) {\n        setError(\"No user logged in.\");\n        setIsLoading(false);\n        router.push(\"/login\");\n        return;\n      }\n\n      try {\n        // Fetch user data\n        const uid = user.uid;\n        const docRef = doc(db, \"users\", uid);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n          const userData = docSnap.data();\n          setUserName(userData.first_name || \"Unknown User\");\n          setCountry(userData.country || \"Unknown Country\");\n          setUserType(userData.user_type || \"Unknown Type\");\n          setProfileImage(userData?.photo_uri || \"\");\n        } else {\n          console.log(\"No such document!\");\n          setError(\"User data not found.\");\n        }\n\n        // Fetch letterboxes\n        const letterboxes = await fetchLetterboxes();\n        if (letterboxes && letterboxes.length > 0) {\n          const letterboxIds = letterboxes.map((l) => l.id);\n          let fetchedLetters = [];\n\n          for (const id of letterboxIds) {\n            const letterbox = { id };\n            const userRef = doc(db, \"users\", user.uid);\n            const draft = await fetchDraft(id, userRef, true);\n\n            if (draft) {\n              letterbox.letters = [draft];\n            } else {\n              letterbox.letters = await fetchLetterbox(id, 1);\n            }\n            fetchedLetters.push(letterbox);\n          }\n\n          // Fetch recipients for each letterbox\n          for await (const l of fetchedLetters) {\n            const rec = await fetchRecipients(l.id);\n            l.recipients = rec;\n          }\n\n          setLetters(fetchedLetters);\n        }\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        Sentry.captureException(err);\n        setError(\"Failed to load data.\");\n      } finally {\n        setIsLoading(false);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [router]);\n\n  return (\n    <div className=\"bg-gray-100 min-h-screen py-6\">\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p className=\"text-red-500\">{error}</p>\n      ) : (\n        <div className=\"max-w-lg mx-auto bg-white shadow-md rounded-lg overflow-hidden\">\n          <header className=\"flex justify-between items-center bg-blue-100 p-5 border-b border-gray-200\">\n            <Link href=\"/profile\">\n              <button className=\"flex items-center text-gray-700\">\n                <ProfileImage photo_uri={profileImage} first_name={userName} />\n                <div className=\"ml-3\">\n                  <div className=\"font-semibold text-lg\">{userName}</div>\n                  <div className=\"text-sm text-gray-600\">{country}</div>\n                </div>\n              </button>\n            </Link>\n\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/settings\">\n                <button\n                  onClick={() =>\n                    logButtonEvent(\"Settings clicked!\", \"/letterhome\")\n                  }\n                  className=\"text-gray-700 hover:text-blue-600\"\n                >\n                  <FaCog className=\"h-7 w-7\" />\n                </button>\n              </Link>\n              <Link href=\"/discover\">\n                <button\n                  onClick={() =>\n                    logButtonEvent(\"Discover clicked!\", \"/letterhome\")\n                  }\n                  className=\"text-gray-700 hover:text-blue-600\"\n                >\n                  <FaBell className=\"h-7 w-7\" />\n                </button>\n              </Link>\n              <Link href=\"/letterwrite\">\n                <button\n                  onClick={() =>\n                    logButtonEvent(\"Write letter clicked!\", \"/letterhome\")\n                  }\n                  className=\"text-gray-700 hover:text-blue-600\"\n                >\n                  <FaPen className=\"h-7 w-7\" />\n                </button>\n              </Link>\n            </div>\n          </header>\n\n          <main className=\"p-6\">\n            <section className=\"mt-8\">\n              <h2 className=\"font-bold text-xl mb-4 text-gray-800 flex justify-between items-center\">\n                Last letters\n                <Link href=\"/letterhome\">\n                  <button\n                    onClick={() =>\n                      logButtonEvent(\"Show more clicked!\", \"/letterhome\")\n                    }\n                    className=\"px-3 py-1 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-300\"\n                  >\n                    Show more\n                  </button>\n                </Link>\n              </h2>\n              {letters.length > 0 ? (\n                letters.map((letter, i) => (\n                  <a\n                    key={letter.id + \"_\" + i}\n                    href={`/letters/${letter.id}`}\n                    className=\"flex items-center p-4 mb-3 rounded-lg bg-white shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer\"\n                  >\n                    <div className=\"flex-grow\">\n                      {letter.recipients?.map((rec) => (\n                        <div key={rec.id} className=\"flex mt-3\">\n                          <ProfileImage\n                            photo_uri={rec?.photo_uri}\n                            first_name={rec?.first_name}\n                          />\n                          <div className=\"flex flex-col\">\n                            <div className=\"flex\">\n                              {letter.letters[0].status === \"draft\" && (\n                                <h4 className=\"mr-2\">[DRAFT]</h4>\n                              )}\n                              <h3 className=\"font-semibold text-gray-800\">\n                                {rec.first_name} {rec.last_name}\n                              </h3>\n                            </div>\n                            <div>{rec.country}</div>\n                          </div>\n                        </div>\n                      ))}\n                      <p className=\"text-gray-600 truncate\">\n                        {letter.letters[0].content ?? \"\"}\n                      </p>\n                      <span className=\"text-xs text-gray-400\">\n                        {letter.letters[0].received}\n                      </span>\n                    </div>\n                  </a>\n                ))\n              ) : (\n                <p className=\"text-gray-500\">No letters found.</p>\n              )}\n            </section>\n          </main>\n          <BottomNavBar />\n        </div>\n      )}\n      {userType === \"admin\" && (\n        <button\n          className=\"flex bg-black text-white rounded py-4 px-4 mt-4 mx-auto\"\n          onClick={() => {\n            logButtonEvent(\"Check For Inactive Chats clicked!\", \"/letterhome\");\n            iterateLetterBoxes();\n          }}\n        >\n          Check For Inactive Chats\n        </button>\n      )}\n    </div>\n  );\n}\n"
        }
    ]
}