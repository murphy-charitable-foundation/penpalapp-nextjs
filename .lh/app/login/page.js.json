{
    "sourceFile": "app/login/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744045163609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744067414072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n import logo from \"/public/murphylogo.png\";\n import { useRouter } from \"next/navigation\";\n import Button from \"@/components/general/Button\";\n import { usePageAnalytics } from \"@/app/utils/useAnalytics\";\n-import { logInEvent } from \"@/app/firebaseConfig\";\n+import { logInEvent, logLoadingTime } from \"@/app/firebaseConfig\";\n export default function Login() {\n   const [email, setEmail] = useState(\"\");\n   const [password, setPassword] = useState(\"\");\n   const [error, setError] = useState(\"\");\n@@ -26,14 +26,24 @@\n   const [rememberMe, setRememberMe] = useState(false);\n   usePageAnalytics(\"/login\");\n \n   useEffect(() => {\n+    const startTime = performance.now();\n     // Check if the user is already logged in and retrieve the email\n     const unsubscribe = auth.onAuthStateChanged((user) => {\n       if (user) {\n         router.push(\"/letterhome\");\n       } else {\n         router.push(\"/login\");\n+\n+        requestAnimationFrame(() => {\n+          setTimeout(() => {\n+            const endTime = performance.now();\n+            const loadTime = endTime - startTime;\n+            console.log(`Page render time: ${loadTime}ms`);\n+            logLoadingTime(\"/login\", loadTime);\n+          }, 0);\n+        });\n       }\n     });\n \n     return () => unsubscribe(); // Clean up the listener on component unmount\n"
                }
            ],
            "date": 1744045163609,
            "name": "Commit-0",
            "content": "\"use client\";\n\n// pages/login.js\nimport { useState, useEffect } from \"react\";\nimport {\n  signInWithEmailAndPassword,\n  browserLocalPersistence,\n  browserSessionPersistence,\n  setPersistence,\n} from \"firebase/auth\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport logo from \"/public/murphylogo.png\";\nimport { useRouter } from \"next/navigation\";\nimport Button from \"@/components/general/Button\";\nimport { usePageAnalytics } from \"@/app/utils/useAnalytics\";\nimport { logInEvent } from \"@/app/firebaseConfig\";\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const router = useRouter();\n  const [rememberMe, setRememberMe] = useState(false);\n  usePageAnalytics(\"/login\");\n\n  useEffect(() => {\n    // Check if the user is already logged in and retrieve the email\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        router.push(\"/letterhome\");\n      } else {\n        router.push(\"/login\");\n      }\n    });\n\n    return () => unsubscribe(); // Clean up the listener on component unmount\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n\n    try {\n      // Set persistence based on \"Remember Me\" checkbox\n      const persistenceType = rememberMe\n        ? browserLocalPersistence\n        : browserSessionPersistence;\n\n      await setPersistence(auth, persistenceType);\n      await signInWithEmailAndPassword(auth, email, password);\n\n      const uid = auth.currentUser.uid;\n      const userRef = doc(db, \"users\", uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        logInEvent(\"success\", \"Existed User logged\");\n        router.push(\"/letterhome\");\n      } else {\n        router.push(\"/create-acc\");\n      }\n    } catch (error) {\n      console.error(\"Authentication error:\", error.message);\n      switch (error.code) {\n        case \"auth/user-not-found\":\n          setError(\"The email is not correct.\");\n          logInEvent(\"failure\", \"The email is not correct.\");\n          break;\n        case \"auth/wrong-password\":\n          setError(\"The password is not correct.\");\n          logInEvent(\"failure\", \"The password is not correct.\");\n          break;\n        case \"auth/too-many-requests\":\n          setError(\"Too many attempts. Your account was blocked.\");\n          logInEvent(\"failure\", \"Too many attempts. Your account was blocked.\");\n          setShowModal(true);\n          break;\n        default:\n          setError(\"Failed to log in.\");\n          logInEvent(\"failure\", \"General Failure\");\n      }\n    }\n  };\n\n  function closeModal() {\n    setShowModal(false);\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 px-6\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div\n          style={{\n            textAlign: \"left\",\n            padding: \"20px\",\n            background: \"white\",\n            height: \"80%\",\n          }}\n        >\n          <div style={{ position: \"relative\" }}>\n            <button\n              style={{\n                border: \"none\",\n                background: \"none\",\n                position: \"absolute\",\n                left: \"0%\",\n                top: \"50%\",\n                transform: \"translateY(-50%)\",\n              }}\n              onClick={() => window.history.back()}\n            >\n              <svg\n                className=\"h-6 w-6 text-gray-600\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M15 19l-7-7 7-7\"\n                />\n              </svg>\n            </button>\n            <span\n              style={{\n                padding: \"0 40%\",\n              }}\n              className=\"flex-grow text-center text-2xl font-bold text-gray-800\"\n            >\n              Login\n            </span>\n          </div>\n\n          <div className=\"flex justify-center mb-20\">\n            <Image\n              src={logo}\n              alt=\"Murphy Charitable Foundation Uganda\"\n              width={150}\n              height={150}\n            />\n          </div>\n          <form className=\" space-y-12  m-auto\" onSubmit={handleSubmit}>\n            <div>\n              <h6 className=\"text-left ml-2 text-gray-800 \">Email</h6>\n              <input\n                type=\"email\"\n                value={email}\n                autoComplete=\"email\"\n                required\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Ex. user@gmail.com\"\n                style={{\n                  border: \"0px\",\n                  borderBottom: \"1px solid black\",\n                  padding: \"10px\",\n                  width: \"100%\",\n                  margin: \"0 auto\",\n                  display: \"block\",\n                  color: \"black\",\n                }}\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n              />\n            </div>\n\n            <div>\n              <h6 className=\"mt-12 text-left ml-2 text-gray-800 \">Password</h6>\n              <input\n                type=\"password\"\n                value={password}\n                autoComplete=\"current-password\"\n                required\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"******\"\n                style={{\n                  border: \"0px\",\n                  borderBottom: \"1px solid black\",\n                  padding: \"10px\",\n                  width: \"100%\",\n                  margin: \"0 auto\",\n                  display: \"block\",\n                  color: \"black\",\n                }}\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n              />\n            </div>\n\n            {error && (\n              <span className=\"flex items-left text-sm text-red-500\">\n                {error}\n              </span>\n            )}\n\n            <div className=\"text-left text-sm\">\n              <a\n                href=\"/reset-password\"\n                style={{ textDecoration: \"underline\" }}\n                className=\"font-medium text-gray-600 hover:text-blue-500\"\n              >\n                Forgot your password?\n              </a>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center w-full justify-between\">\n                <label\n                  htmlFor=\"remember-me\"\n                  className=\"ml-2 block text-sm text-gray-900\"\n                >\n                  Remember me\n                </label>\n                <input\n                  id=\"remember-me\"\n                  name=\"remember-me\"\n                  type=\"checkbox\"\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  checked={rememberMe}\n                  onChange={(e) => setRememberMe(e.target.checked)}\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-center\">\n              <Button\n                btnText={\"Log in\"}\n                btnType=\"submit\"\n                color={\"bg-gray-200\"}\n                textColor={\"text-gray-400\"}\n                hoverColor={\"hover:bg-gray-500\"}\n                hoverTextClr={\"hover:text-white\"}\n                font={\"font-medium\"}\n                disabled={email === \"\"}\n              />\n              {/* <button\n                type=\"submit\"\n                style={{\n                  width: \"80%\",\n                  display: \"block\",\n                  borderRadius: \"20px\",\n                  cursor: \"pointer\",\n                  hover: \"enabled\",\n                }}\n                className=\"group relative  w-full flex justify-center py-2 px-4 border border-transparent rounded-full text-sm font-medium  text-gray-400 bg-gray-200 hover:bg-[#48801c] hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-transparent\"\n                disabled={email === \"\"}\n              >\n                Login\n              </button> */}\n            </div>\n          </form>\n\n          {showModal && (\n            <div\n              style={{\n                position: \"absolute\",\n                paddingTop: \"80px\",\n                top: 0,\n                left: 0,\n                width: \"100%\",\n                height: \"100%\",\n                background: \"rgba(0, 0, 0, 0.8)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                overflow: \"auto\",\n                zIndex: \"2\",\n              }}\n            >\n              <div\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"20px\",\n                  borderRadius: \"5px\",\n                  textAlign: \"left\",\n                  width: \"80%\",\n                  boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2)\",\n                }}\n              >\n                <h3 style={{ color: \"red\" }}>Your account was blocked</h3>\n                <p\n                  style={{\n                    color: \"black\",\n                    marginTop: \"20px\",\n                    leading: \"[2rem]\",\n                  }}\n                >\n                  Please send an email to verify the reason.\n                </p>\n                <div className=\"flex justify-center\">\n                  <button\n                    onClick={closeModal}\n                    style={{\n                      backgroundColor: \"#48801c\",\n                      color: \"white\",\n                      padding: \"10px 20px\",\n                      margin: \"30px 0\",\n                      borderRadius: \"20px\",\n                      border: \"none\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Understood\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}